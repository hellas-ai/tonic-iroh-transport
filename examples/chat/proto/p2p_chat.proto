syntax = "proto3";

package p2p_chat;

// P2P Chat Service - demonstrates both unary and streaming RPC patterns
service P2PChatService {
  // Send a message to a peer
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);
  
  // Subscribe to incoming messages (server streaming)
  rpc SubscribeMessages(SubscribeRequest) returns (stream Message);
  
  // Get chat history between peers
  rpc GetHistory(GetHistoryRequest) returns (GetHistoryResponse);
  
  // Bi-directional chat stream
  rpc ChatStream(stream Message) returns (stream Message);
}

// Node discovery and health service
service NodeService {
  // Get information about this node
  rpc GetNodeInfo(Empty) returns (NodeInfo);
  
  // Ping for connectivity testing
  rpc Ping(PingRequest) returns (PingResponse);
  
  // List connected peers
  rpc ListPeers(Empty) returns (ListPeersResponse);
}

// Messages
message SendMessageRequest {
  string recipient_id = 1;
  string content = 2;
  int64 timestamp = 3;
}

message SendMessageResponse {
  bool success = 1;
  string error = 2;
  string message_id = 3;
}

message SubscribeRequest {
  // Empty for now - could add filters in the future
}

message Message {
  string id = 1;
  string sender_id = 2;
  string recipient_id = 3;
  string content = 4;
  int64 timestamp = 5;
  MessageType type = 6;
}

enum MessageType {
  TEXT = 0;
  SYSTEM = 1;
  HEARTBEAT = 2;
}

message GetHistoryRequest {
  string peer_id = 1;
  int32 limit = 2;
  int64 before_timestamp = 3;
}

message GetHistoryResponse {
  repeated Message messages = 1;
  bool has_more = 2;
}

message NodeInfo {
  string node_id = 1;
  repeated string addresses = 2;
  string version = 3;
  int64 uptime_seconds = 4;
  int32 connected_peers = 5;
}

message PingRequest {
  int64 timestamp = 1;
  string data = 2;
}

message PingResponse {
  int64 request_timestamp = 1;
  int64 response_timestamp = 2;
  string echo_data = 3;
}

message ListPeersResponse {
  repeated PeerInfo peers = 1;
}

message PeerInfo {
  string node_id = 1;
  repeated string addresses = 2;
  int64 connected_since = 3;
  ConnectionType connection_type = 4;
}

enum ConnectionType {
  DIRECT = 0;
  RELAY = 1;
  UNKNOWN = 2;
}

message Empty {}